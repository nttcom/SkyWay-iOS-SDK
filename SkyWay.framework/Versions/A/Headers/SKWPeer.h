//
//  SKWPeer.h
//  SKWPeer
//

#ifndef SKWPeer_SKWPeer_h
#define SKWPeer_SKWPeer_h


#import <Foundation/Foundation.h>

#import "SKWPeerCommon.h"
#import "SKWPeerError.h"
#import "SKWDataConnection.h"
#import "SKWMediaConnection.h"
#import "SKWPeerOption.h"
#import "SKWIceConfig.h"

#pragma mark - Static

/// True string value
static NSString* const kSKWTrue = @"true";
/// False string value
static NSString* const kSKWFalse = @"false";

/**
 Connection type
 */
/// Connection type 'data'
static NSString* const kSKWConnectionTypeData = @"data";
/// Connection type 'media'
static NSString* const kSKWConnectionTypeMedia = @"media";

/**
 Peer data serialization type
 */
/// Binary
static NSString* const kSKWPeerSerializationBinary = @"binary";
/// Binary (UTF-8)
static NSString* const kSKWPeerSerializationBinaryUtf8 = @"binary-utf8";
/// JSON
static NSString* const kSKWPeerSerializationJson = @"json";
/// None
static NSString* const kSKWPeerSerializationNone = @"none";

#pragma mark -

/**
 Peer event type
 */
typedef NS_ENUM(NSUInteger, SKWPeerEventEnum)
{
	/// Emitted when a connection to the PeerServer is established.
	SKW_PEER_EVENT_OPEN,
	/// Emitted when a new data connection is established from a remote peer.
	SKW_PEER_EVENT_CONNECTION,
	/// Emitted when a remote peer attempts to call you.
	SKW_PEER_EVENT_CALL,
	/// Emitted when the peer is destroyed and can no longer accept or create any new connections
	SKW_PEER_EVENT_CLOSE,
	/// Emitted when the peer is disconnected from the signalling server, either manually or because the connection to the signalling server was lost.
	SKW_PEER_EVENT_DISCONNECTED,
	/// Errors on the peer are almost always fatal and will destroy the peer.
	SKW_PEER_EVENT_ERROR,
};

/**
 Alternative class as Peer
 */
@interface SKWPeer : NSObject

#pragma mark - Properties

/// The brokering ID of this peer. If no ID was specified in the constructor, this will be undefined until the open event is emitted.
@property (nonatomic, readonly) NSString* identity;
/// A object array of all connections this peer, keyed by the remote peer's ID.
@property (nonatomic, readonly) NSMutableDictionary* connections;
/// false if there is an active connection to the PeerServer.
@property (nonatomic, readonly) BOOL isDisconnected;
/// true if this peer and all of its connections can no longer be used.
@property (nonatomic, readonly) BOOL isDestroyed;

#pragma mark - Methods

/**
 A peer can connect to other peers and listen for connections. ID is retrieve from brokering server.
 @param options Option seetings.
 @return PeerObjC object
 */
- (instancetype)initWithOptions:(SKWPeerOption *)options;

/**
 A peer can connect to other peers and listen for connections.
 @param peerId Other peers can connect to this peer using the provided ID. If no ID is given, one will be generated by the brokering server.
 @param options Option setting
 @return PeerObjC object
 */
- (instancetype)initWithId:(NSString *)peerId options:(SKWPeerOption *)options;

/**
 Connects to the remote peer specified by id and returns a data connection. Be sure to listen on the error event in case the connection fails.
 @param peerId The brokering ID of the remote peer (their peer.id).
 @return PeerObjC object
 */
- (SKWDataConnection *)connectWithId:(NSString *)peerId;

/**
 Connects to the remote peer specified by id and returns a data connection. Be sure to listen on the error event in case the connection fails.
 @param peerId The brokering ID of the remote peer (their peer.id).
 @param options Option setting dictionary
 @return Data connection object
 */
- (SKWDataConnection *)connectWithId:(NSString *)peerId options:(SKWConnectOption *)options;

/**
 Calls the remote peer specified by id and returns a media connection. Be sure to listen on the error event in case the connection fails.
 @param peerId Remote peer ID
 @param stream Video stream
 @return Media connection object
 */
- (SKWMediaConnection *)callWithId:(NSString *)peerId stream:(SKWMediaStream *)stream;

/**
 Calls the remote peer specified by id and returns a media connection. Be sure to listen on the error event in case the connection fails.
 @param peerId Remote peer ID
 @param stream Video stream
 @param options Option seeting dictionary
 @return Media connection object
 */
- (SKWMediaConnection *)callWithId:(NSString *)peerId stream:(SKWMediaStream *)stream options:(SKWCallOption *)options;

/**
 Set blocks for peer events. (Block Literal Syntax)
 @param event Event type
 @param callback Callback block literal
 */
- (void)on:(SKWPeerEventEnum)event callback:(void (^)(NSObject *))callback;

/**
 Close the connection to the server, leaving all existing data and media connections intact. peer.disconnected will be set to true and the disconnected event will fire.
 @return Processing result
 */
- (BOOL)disconnect;

/**
 Attempt to reconnect to the server with the peer's old ID.
 */
- (void)reconnect;

/**
 Close the connection to the server and terminate all existing connections. peer.destroyed will be set to true.
 @return Processing result
 */
- (BOOL)destroy;

/**
 Listing peer ID.
 @param callback Callback block
 */
- (void)listAllPeers:(void (^)(NSArray *))callback;

@end


#endif